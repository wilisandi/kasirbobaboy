/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.kasirbobaboy;

import konfigurasi.koneksi;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author TESTUSER
 */
public class utama extends javax.swing.JFrame {

    /**
     * Creates new form utama
     */
    private DefaultTableModel DftTabelTerbaru;
    private DefaultTableModel DftTabelProduk;
    private DefaultTableModel DftTabelPenjualan = new DefaultTableModel();
    private List<Product> listProduct = new ArrayList<>();
    private String SQL;

    public utama() {
        initComponents();
        TampilTerbaru();
        ListProduk();

        btnEdit.setVisible(false);
        btnHapus.setVisible(false);
        DftTabelPenjualan.addColumn("Id");
        DftTabelPenjualan.addColumn("Name");
        DftTabelPenjualan.addColumn("Quantity");
        DftTabelPenjualan.addColumn("Harga");
        tblPenjualan.setModel(DftTabelPenjualan);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        Produk = new javax.swing.JButton();
        textPembeli = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPenjualan = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        totalHarga = new javax.swing.JLabel();
        btnProses = new javax.swing.JButton();
        selectProduk = new javax.swing.JComboBox<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblTerbaru = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        btnEdit = new javax.swing.JButton();
        btnHapus = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Bobaboy App");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("BobaBoy");

        Produk.setText("Produk");
        Produk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProdukActionPerformed(evt);
            }
        });

        jLabel2.setText("Pembeli");

        tblPenjualan.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Produk", "Harga", "Quantity", "Total"
            }
        ));
        tblPenjualan.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                tblPenjualanPropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(tblPenjualan);

        jLabel3.setText("Yang di Beli");

        jLabel4.setText("Total");

        totalHarga.setText("Rp 0.0");

        btnProses.setText("Simpan");
        btnProses.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProsesActionPerformed(evt);
            }
        });

        selectProduk.setEditable(true);
        selectProduk.setKeySelectionManager(null);
        selectProduk.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                selectProdukItemStateChanged(evt);
            }
        });
        selectProduk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectProdukActionPerformed(evt);
            }
        });
        selectProduk.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                selectProdukPropertyChange(evt);
            }
        });

        tblTerbaru.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblTerbaru.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblTerbaruMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tblTerbaru);

        jLabel6.setText("Log Penjualan Terakhir");

        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnHapus.setText("Hapus");
        btnHapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHapusActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addGap(87, 87, 87)
                .addComponent(totalHarga)
                .addGap(100, 100, 100))
            .addGroup(layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(textPembeli)
                            .addComponent(selectProduk, 0, 362, Short.MAX_VALUE))
                        .addGap(350, 350, 350))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addGap(245, 245, 245)
                                        .addComponent(Produk))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnHapus)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnEdit)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnProses)))))
                        .addGap(43, 43, 43))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(Produk))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textPembeli, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(selectProduk, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(totalHarga))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnProses)
                    .addComponent(btnEdit)
                    .addComponent(btnHapus))
                .addGap(15, 15, 15)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(47, Short.MAX_VALUE))
        );

        selectProduk.getAccessibleContext().setAccessibleParent(Produk);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    private void TampilTerbaru() {
        DftTabelTerbaru = new DefaultTableModel();
        DftTabelTerbaru.addColumn("Id");
        DftTabelTerbaru.addColumn("Tanggal");
        DftTabelTerbaru.addColumn("Pembeli");
        DftTabelTerbaru.addColumn("Total");

        tblTerbaru.setModel(DftTabelTerbaru);
        Connection conn = koneksi.getConnection();
        try {
            java.sql.Statement stmt = conn.createStatement();
            SQL = "SELECT * FROM penjualan ORDER BY penjualan.Tgl_Jual DESC";
            java.sql.ResultSet res = stmt.executeQuery(SQL);
            while (res.next()) {
                DftTabelTerbaru.addRow(new Object[]{
                    res.getString("Id"),
                    res.getString("Tgl_Jual"),
                    res.getString("Nama_Pembeli"),
                    res.getString("Total")});
            }
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    private void ListProduk() {
        Connection conn = koneksi.getConnection();
        try {
            java.sql.Statement stmt = conn.createStatement();
            java.sql.ResultSet res = stmt.executeQuery("SELECT * FROM produk;");
            selectProduk.removeAllItems();
            listProduct = new ArrayList<>();
            selectProduk.addItem("Pilih Produk");
            while (res.next()) {
                listProduct.add(new Product(
                        Integer.parseInt(res.getString("Id").toString()),
                        res.getString("Nama").toString(),
                        1,
                        Double.parseDouble(res.getString("Harga").toString())
                ));
                selectProduk.addItem(res.getString("Nama").toString());
            }
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    public static class Product {

        private int id;
        private String nama;
        private int jumlah;
        private double harga;

        public Product(int id, String nama, Integer jumlah, double harga) {
            this.id = id;
            this.nama = nama;
            this.jumlah = jumlah;
            this.harga = harga;
        }

        public int getId() {
            return id;
        }

        public String getName() {
            return nama;
        }

        public double getPrice() {
            return harga;
        }

        public double getJumlah() {
            return jumlah;
        }
    }
    private void btnProsesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProsesActionPerformed
        // TODO add your handling code here:
        String text = btnProses.getText();
        if (text == "Proses") {
            String namaPembeli = textPembeli.getText();
            if (namaPembeli.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Nama Pembeli tidak boleh kosong", "Pesan", JOptionPane.WARNING_MESSAGE);
                return;
            }
            List<Product> dataPenjualan = getAllData();
            if (dataPenjualan.size() == 0) {
                JOptionPane.showMessageDialog(null, "Pilih Produk minimal 1", "Pesan", JOptionPane.WARNING_MESSAGE);
                return;
            }
            Double totalHarga = Double.parseDouble(this.totalHarga.getText().replace("Rp ", ""));

            Connection conn = koneksi.getConnection();
            try {
                PreparedStatement stmt = conn.prepareStatement("INSERT INTO `penjualan` (`Tgl_Jual`, `Nama_Pembeli`, `Total`) VALUES (?,?,?)", Statement.RETURN_GENERATED_KEYS);
                stmt.setString(1, LocalDateTime.now().toString());
                stmt.setString(2, namaPembeli);
                stmt.setDouble(3, totalHarga);
                stmt.executeUpdate();
                ResultSet generatedKeys = stmt.getGeneratedKeys();
                if (generatedKeys.next()) {
                    long generatedId = generatedKeys.getLong(1);
                    PreparedStatement stmt1 = conn.prepareStatement("INSERT INTO `log_penjualan` (`Id_Penjualan`, `Id_Produk`, `Jumlah`) VALUES (?,?,?)");
                    for (Product product : dataPenjualan) {
                        stmt1.setLong(1, generatedId);
                        stmt1.setInt(2, product.getId());
                        stmt1.setDouble(3, product.getJumlah());
                        stmt1.executeUpdate();
                    }
                    TampilTerbaru();
                    textPembeli.setText(null);
                    selectProduk.setSelectedIndex(0);
                    this.totalHarga.setText("Rp 0.0");
                    DftTabelPenjualan = new DefaultTableModel();
                    DftTabelPenjualan.addColumn("Id");
                    DftTabelPenjualan.addColumn("Name");
                    DftTabelPenjualan.addColumn("Quantity");
                    DftTabelPenjualan.addColumn("Harga");
                    tblPenjualan.setModel(DftTabelPenjualan);
                    System.out.println("Generated ID: " + generatedId);
                } else {
                    System.out.println("No generated keys were returned.");
                }
                JOptionPane.showMessageDialog(null, "Penjualan berhasil di input", "Pesan", JOptionPane.INFORMATION_MESSAGE);
            } catch (SQLException e) {
                System.out.println(e.getMessage());
            }
        } else {
            textPembeli.setText(null);
            this.totalHarga.setText("Rp 0.0");
            DftTabelPenjualan = new DefaultTableModel();
            DftTabelPenjualan.addColumn("Id");
            DftTabelPenjualan.addColumn("Name");
            DftTabelPenjualan.addColumn("Quantity");
            DftTabelPenjualan.addColumn("Harga");
            tblPenjualan.setModel(DftTabelPenjualan);
            btnProses.setText("Proses");
            btnEdit.setVisible(false);
            btnHapus.setVisible(false);
        }
    }//GEN-LAST:event_btnProsesActionPerformed

    private void ProdukActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProdukActionPerformed
        produk formProduk = new produk();
        formProduk.show();        // TODO
        formProduk.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosed(java.awt.event.WindowEvent windowEvent) {
                // Code to execute when frmAddProduk is closed
                ListProduk();
            }
        });
    }//GEN-LAST:event_ProdukActionPerformed

    private void selectProdukPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_selectProdukPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_selectProdukPropertyChange

    private void selectProdukActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectProdukActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_selectProdukActionPerformed

    private void selectProdukItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_selectProdukItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == evt.SELECTED) {
            Integer ind = selectProduk.getSelectedIndex();
            if (ind != -1 && ind != 0) {
                Product obj = listProduct.get(ind - 1);
                List<Product> dataPenjualan = getAllData();
                Integer index = getIndexFromTblPenjualan(dataPenjualan, obj.id);
                Double totalPrice = 0.0;
                for (Product product : dataPenjualan) {
                    if (product.id != obj.id) {
                        totalPrice += product.getPrice();
                    }
                }
                if (index != -1) {
                    int jml = dataPenjualan.get(index).jumlah + 1;
                    DftTabelPenjualan.setValueAt(jml, index, 2);
                    DftTabelPenjualan.setValueAt(jml * obj.harga, index, 3);
                    totalPrice += (jml * obj.harga);
                } else {
                    DftTabelPenjualan.addRow(new Object[]{
                        obj.id,
                        obj.nama,
                        1,
                        obj.harga
                    });
                    totalPrice += obj.harga;
                }
                totalHarga.setText("Rp " + totalPrice);
            }
        }
    }//GEN-LAST:event_selectProdukItemStateChanged

    private void tblPenjualanPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_tblPenjualanPropertyChange
        int ind = tblPenjualan.getSelectedRow();
        System.out.println("Tabel :" + ind);
        if (ind != -1) {
            String strId = DftTabelPenjualan.getValueAt(ind, 0).toString();
            String strQty = DftTabelPenjualan.getValueAt(ind, 2).toString();
            System.out.println("Id Product :" + strId);

            if (!strId.isEmpty() && !DftTabelPenjualan.getValueAt(ind, 2).toString().isEmpty()) {
                int id = Integer.parseInt(strId);
                List<Product> listFilter = listProduct.stream().filter(s -> s.id == id).collect(Collectors.toList());
                if (listFilter.size() > 0) {
                    Product obj = listFilter.get(0);
                    List<Product> dataPenjualan = getAllData();
                    Double totalPrice = 0.0;
                    for (Product product : dataPenjualan) {
                        if (product.id != obj.id) {
                            totalPrice += product.getPrice();
                        }
                    }
                    Double ttl = totalPrice + (obj.harga * Integer.parseInt(strQty));
                    DftTabelPenjualan.setValueAt((obj.harga * Integer.parseInt(strQty)), ind, 3);
                    this.totalHarga.setText("Rp " + ttl.toString());
                }
            }
        }
    }//GEN-LAST:event_tblPenjualanPropertyChange
    private Integer Id = -1;
    private void tblTerbaruMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblTerbaruMouseClicked
        // TODO add your handling code here:
        btnEdit.setVisible(true);
        btnHapus.setVisible(true);
        btnProses.setText("Cancel");
        int baris = tblTerbaru.getSelectedRow();
        if (baris != -1) {
            String pembeli = DftTabelTerbaru.getValueAt(baris, 2).toString();
            String total = DftTabelTerbaru.getValueAt(baris, 3).toString();
            Id = Integer.parseInt(DftTabelTerbaru.getValueAt(baris, 0).toString());
            totalHarga.setText("Rp " + total);
            textPembeli.setText(pembeli);
            DftTabelPenjualan = new DefaultTableModel();
            DftTabelPenjualan.addColumn("Id");
            DftTabelPenjualan.addColumn("Name");
            DftTabelPenjualan.addColumn("Quantity");
            DftTabelPenjualan.addColumn("Harga");

            tblPenjualan.setModel(DftTabelPenjualan);
            Connection conn = koneksi.getConnection();
            try {
                java.sql.Statement stmt = conn.createStatement();
                SQL = "SELECT log_penjualan.Jumlah, log_penjualan.Id_Produk, produk.Id, produk.Nama, produk.Harga FROM log_penjualan INNER JOIN produk ON log_penjualan.Id_Produk = produk.Id WHERE log_penjualan.Id_Penjualan = '" + Id + "'";
                java.sql.ResultSet res = stmt.executeQuery(SQL);
                while (res.next()) {
                    DftTabelPenjualan.addRow(new Object[]{
                        res.getString("Id"),
                        res.getString("Nama"),
                        res.getString("Jumlah"),
                        (Integer.parseInt(res.getString("Jumlah")) * Double.parseDouble(res.getString("Harga")))});
                }
            } catch (SQLException e) {
                System.out.println(e.getMessage());
            }
        }
    }//GEN-LAST:event_tblTerbaruMouseClicked

    private void btnHapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHapusActionPerformed
        int baris = tblTerbaru.getSelectedRow();
        if (baris == -1) {
            JOptionPane.showMessageDialog(null, "Mohon Pilih Penjualan terlebih dahulu!", "Pesan", JOptionPane.WARNING_MESSAGE);
        } else {
            Connection conn = koneksi.getConnection();
            int confirm = JOptionPane.showConfirmDialog(null, "Apakah anda yakin ingin menghapus data tersebut?", "Konfirmasi", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (confirm == 0) {
                try {
                    java.sql.PreparedStatement stmt = conn.prepareStatement("delete from penjualan where Id ='" + DftTabelTerbaru.getValueAt(baris, 0).toString() + "'");
                    stmt.executeUpdate();
                    JOptionPane.showMessageDialog(null, "Data Berhasil Dihapus", "Pesan", JOptionPane.INFORMATION_MESSAGE);
                    TampilTerbaru();
                    textPembeli.setText(null);
                    this.totalHarga.setText("Rp 0.0");
                    DftTabelPenjualan = new DefaultTableModel();
                    DftTabelPenjualan.addColumn("Id");
                    DftTabelPenjualan.addColumn("Name");
                    DftTabelPenjualan.addColumn("Quantity");
                    DftTabelPenjualan.addColumn("Harga");
                    tblPenjualan.setModel(DftTabelPenjualan);
                    btnProses.setText("Proses");
                    btnEdit.setVisible(false);
                    btnHapus.setVisible(false);
                } catch (SQLException e) {
                    System.out.println(e.getMessage());
                }
            }
        }        // TODO add your handling code here:
    }//GEN-LAST:event_btnHapusActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        String namaPembeli = textPembeli.getText();
        if (namaPembeli.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Nama Pembeli tidak boleh kosong", "Pesan", JOptionPane.WARNING_MESSAGE);
            return;
        }
        List<Product> dataPenjualan = getAllData();
        if (dataPenjualan.size() == 0) {
            JOptionPane.showMessageDialog(null, "Pilih Produk minimal 1", "Pesan", JOptionPane.WARNING_MESSAGE);
            return;
        }
        Double totalHarga = Double.parseDouble(this.totalHarga.getText().replace("Rp ", ""));

        Connection conn = koneksi.getConnection();
        try {
            PreparedStatement stmt = conn.prepareStatement("UPDATE `penjualan` SET Nama_Pembeli=?, Total=? WHERE Id=?", Statement.RETURN_GENERATED_KEYS);
            stmt.setString(1, namaPembeli);
            stmt.setDouble(2, totalHarga);
            stmt.setLong(3, Id);
            stmt.executeUpdate();
            PreparedStatement stmt1Del = conn.prepareStatement("DELETE FROM log_penjualan WHERE Id_Penjualan = '" + Id + "'");
            stmt1Del.executeUpdate();
            PreparedStatement stmt1 = conn.prepareStatement("INSERT INTO `log_penjualan` (`Id_Penjualan`, `Id_Produk`, `Jumlah`) VALUES (?,?,?)");
            for (Product product : dataPenjualan) {
                stmt1.setLong(1, Id);
                stmt1.setInt(2, product.getId());
                stmt1.setDouble(3, product.getJumlah());
                stmt1.executeUpdate();
            }
            TampilTerbaru();
            textPembeli.setText(null);
            selectProduk.setSelectedIndex(0);
            this.totalHarga.setText("Rp 0.0");
            DftTabelPenjualan = new DefaultTableModel();
            DftTabelPenjualan.addColumn("Id");
            DftTabelPenjualan.addColumn("Name");
            DftTabelPenjualan.addColumn("Quantity");
            DftTabelPenjualan.addColumn("Harga");
            tblPenjualan.setModel(DftTabelPenjualan);

            JOptionPane.showMessageDialog(null, "Penjualan berhasil diupdate", "Pesan", JOptionPane.INFORMATION_MESSAGE);
            
                    btnProses.setText("Proses");
                    btnEdit.setVisible(false);
                    btnHapus.setVisible(false);
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }        // TODO add your handling code here:
    }//GEN-LAST:event_btnEditActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(utama.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(utama.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(utama.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(utama.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new utama().setVisible(true);
            }
        });
    }

    private static int getIndexFromTblPenjualan(List<Product> dataPenjualan, Integer id) {
        for (int i = 0; i < dataPenjualan.size(); i++) {
            if (dataPenjualan.get(i).getId() == id) {
                return i; // Return the index if the product name matches
            }
        }
        return -1;
    }

    private List<Product> getAllData() {
        List<Product> allData = new ArrayList<>();

        DefaultTableModel model = (DefaultTableModel) tblPenjualan.getModel();

        for (int row = 0; row < model.getRowCount(); row++) {
            Integer id = Integer.parseInt(model.getValueAt(row, 0).toString()); // Assuming column 0 is for the name
            String name = (String) model.getValueAt(row, 1); // Assuming column 0 is for the name
            Integer jumlah = Integer.parseInt(model.getValueAt(row, 2).toString()); // Assuming column 1 is for the price
            double price = (double) model.getValueAt(row, 3); // Assuming column 1 is for the price
            Product product = new Product(id, name, jumlah, price);
            allData.add(product);
        }

        return allData;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Produk;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnHapus;
    private javax.swing.JButton btnProses;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JComboBox<String> selectProduk;
    private javax.swing.JTable tblPenjualan;
    private javax.swing.JTable tblTerbaru;
    private javax.swing.JTextField textPembeli;
    private javax.swing.JLabel totalHarga;
    // End of variables declaration//GEN-END:variables
}
